include partials/label
include partials/project
extends partials/project_page

block meta_tags
    meta(charset="utf-8")
    - var domain = 'http://www.joelsimon.net/';
    //- meta(content="width=device-width, maximum-scale=1, user-scalable=no" name="viewport")
    meta(property="og:title", content="Forms Of Life")
    meta(property="og:description", content="Forms Of Life. An art/research work by Joel Simon.")
    meta(property="og:image", content=domain+'imgs/form-of-life/preview.png')
    meta(property="og:image:width", content="512")
    meta(property="og:image:height", content="256")
    meta(property="og:image:type", content="image/jpeg")
    meta(property="og:url", content='http://www.joelsimon.net/forms-of-life.html')
    meta(name="twitter:card", content="summary_large_image")
    meta(name="twitter:creator", content="@_joelsimon")
    meta(name="twitter:text:title", content="Forms Of Life")
    meta(name="twitter:image", content=domain+'imgs/form-of-life/preview.png')
    meta(name="Description", content="Forms Of Life. An art/research work by Joel Simon.")
    link(rel='stylesheet', href='/style/index.css')
    link(rel='stylesheet', href='/style/forms-of-life.css')

block content
    -var imgroot = 'imgs/forms-of-life/'

    h1 Forms of Life
    
    p Inspired by the idea of #[i Life] by architect Christopher Alexander and the artificial life simulation #[i Game Of Life] by John Conway, the living environments of GOL are optimized to maximize their total life. #[i i.e] a generative architecture for artificial life. 
    .gol-container
        .images
            //- img(src=imgroot+'scalar_err/direct/+0361.png')
            //- img(src=imgroot+'scalar_err/direct/+0399.png')
            //- img(src=imgroot+'scalar_err/latent/+0285.png')
            img(src=imgroot+'ga_direct_64/+0381.png')
            img(src=imgroot+'ga_direct_64/+0347.png')
            img(src=imgroot+'ga_direct_64/+0397.png')
            img(src=imgroot+'ga_direct_64/+0370.png')
    p.quote 
        | "The more living patterns there are in a place - a room, a building, or a town - the more it comes to life as an entirety, the more it glows, the more it has that self-maintaining fire which is the quality without a name."
        br
        | - Christopher Alexander
    br
    .flex-cols2
        .flex-col
            img(src=imgroot+'pulsar.gif', style='height:200px;')
            //- p.centered #[a(href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life') Conways "Life" ]
            p.centered
                a(
                    href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life',
                    target='_blank'
                ) #[i Life]
                |  or #[i Game of Life] by mathematician 
                a(
                    href='https://en.wikipedia.org/wiki/John_Horton_Conway',
                    target='_blank'
                ) John Conway
                |  is one of the most simple and well known instances of computational emergence. Each active pixel represents 'life' and a few simple rules dictate how they spread and die.

            //- #[a(href='http://picbreeder.org/') Picbreeder]
        .flex-col
            img(src=imgroot+'courtyard.jpg', style='height:200px;')
            p.centered 
                a(
                    href='https://bofh.org.uk/2003/07/29/the-quality-without-a-name/',
                    target='_blank'
                ) #[i Life]
                |  or the #[i Quality Without a Name] by architect and mathematician 
                a(
                    href='https://en.wikipedia.org/wiki/Christopher_Alexander',
                    target='_blank'
                ) Christopher Alexander
                |  is 
                a(
                    href='http://zeta.math.utsa.edu/~yxk833/Chris.text.html',
                    target='_blank'
                ) not easy to define
                |  but is roughly the capacity for design to nurture and spur life and positive experience.
    
    //- p The spaces that we - and all other life - inhabit have subtle and profound affects on our lives. 
    p All life is guided by its environment and subtle changes in spaces can have profound effects. Architectural generative design is the practice of using software to assist with the design of buildings so that they may be 'better' for the either the environment, developer or future inhabitants.  Despite the appeal, #[i how] to make it better and #[i what] kind of better and for #[i whom] are rarely clear. Here, the #[i what] and #[i who] are radically simplified since we can simulate the life completely and the focus is on the #[i how]. Essentially, it is the most simple but pure generative architecture project possible. 
    //- .gol-container
        .images
            img(src=imgroot+'cmae/28250.png')
            img(src=imgroot+'cmae/28300.png')
            img(src=imgroot+'cmae/09750.png')
            img(src=imgroot+'cmae/16650.png')
            //- img(src=imgroot+'cmae/16750.png')
    h2 Randoms
    p To get a feel for the optimization results, random forms are shown below for contrast. These were generated using #[a(href='https://www.redblobgames.com/maps/terrain-from-noise/', target='_blank') Perlin noise].
    .gol-container
        .images
            img(src=imgroot+'randoms/+download-4.png')
            img(src=imgroot+'randoms/+download-1.png')
            img(src=imgroot+'randoms/+download-2.png')
            img(src=imgroot+'randoms/+download-3.png')

    h2 Hostile Design
    p Below is optimizing for minimum life and maximum resources. This is the bad architecture of GOL. Sometimes only missing a few things makes a large difference.
    .gol-container.no-canvas-filter(style='margin-top:0px;')
        .images
            img(src=imgroot+'anti/+0182.png')
            img(src=imgroot+'anti/+0221.png')
            img(src=imgroot+'anti/+0229.png')
            img(src=imgroot+'anti/+0273.png')

    h2 Metrics
    p Even in this radically simplified environment a description of goodness has some subjectivity. Originally, simply  the total average amount of life was used. But this yielded many static patterns. So do we want more static or dynamic life? The other runs use the amount of created life / area as the objective. #[b Below]: examples of static patterns with original fitness function.
    .gol-container
        .images
            img(src=imgroot+'ga_direct_64/archive/+0296-1.png')
            //- img(src=imgroot+'ga_direct_64/archive/+0280.png')
            img(src=imgroot+'scalar_err/stillife/+0169.png')
            img(src=imgroot+'scalar_err/stillife/+41700.png')
            //- img(src=imgroot+'ga_direct_64/archive/+0299-1.png')
            img(src=imgroot+'ga_direct_64/archive/+0289.png')
    p.centered 


    h2 Varying amounts of space
    p Doing a multi-objective optimization (NSGA-II) enables optimizing for life and resource usage (used pixels) separately. #[b Below]: options from the Pareto front of solutions.
    .gol-container.eight
        .images
            img(src=imgroot+'ga_direct_64/2_obj/+download.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-1.png')
            //- img(src=imgroot+'ga_direct_64/2_obj/+download-2.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-8.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-3.png')
            //- img(src=imgroot+'ga_direct_64/2_obj/+download-7.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-4.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-5.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-6.png')
            img(src=imgroot+'ga_direct_64/2_obj/+download-9.png')
            //- img(src=imgroot+'ga_newlife/0299.png')
    
    H2 Methods
    p This project was an opportunity to experiment with spatial optimization methods. The simplicity of this problem makes it a useful test environment, but also illustrates how algorithms always have their own biases and impact output designs as much as metrics or datasets. All methods were averaged over 5 runs with 80,000 evaluations and the same starting seed.
    
    //- p: ol
        li Genetic algorithms directly on the images.
        li Train a GAN on Perlin noise images and do a genetic algorithm on the latent space.
        li Use the same GAN but use Covariance Matrix Adaptation Evolution Strategy.
        li Use a Content and Pattern Producing Network (CPPN) with neural-evolution.
    h3 1: Genetic algorithms directly on the images.
    //- p 
    .gol-container
        .images
            img(src=imgroot+'scalar_err/direct/+0220.png')
            img(src=imgroot+'scalar_err/direct/+0317.png')
            img(src=imgroot+'scalar_err/direct/+0377.png')
            img(src=imgroot+'scalar_err/direct/+0386.png')
    h3 2. Train a GAN on Perlin noise images and do a genetic algorithm within the latent space.
    .gol-container
        .images
            img(src=imgroot+'scalar_err/latent/+0390.png')
            img(src=imgroot+'scalar_err/latent/+0393.png')
            img(src=imgroot+'scalar_err/latent/+0400 copy.png')
            img(src=imgroot+'scalar_err/latent/+0400-1.png')
            //- img(src=imgroot+'scalar_err/latent/+0395.png')
            //- img(src=imgroot+'scalar_err/latent/+0399.png')
            //- img(src=imgroot+'scalar_err/latent/+0362.png')
    h3 3. Use the same GAN but use Covariance Matrix Adaptation Evolution Strategy (CMA-ES).
    .gol-container
        .images
            img(src=imgroot+'scalar_err/cmae/+55400.png')
            img(src=imgroot+'scalar_err/cmae/+09600.png')
            img(src=imgroot+'scalar_err/cmae/+14600.png')
            img(src=imgroot+'scalar_err/cmae/+15700.png')
            
    h3 4: Use a Content and Pattern Producing Network (CPPN) with neural-evolution.
    //- p.centered #[b Left]: Direct-Evolution. #[b Right]: Latent-Evolution
    .gol-container
        .images
            //- img(src=imgroot+'scalar_err/cppn/+0000.png')
            img(src=imgroot+'scalar_err/cppn/+0156.png')
            img(src=imgroot+'scalar_err/cppn/+0141.png')
            img(src=imgroot+'scalar_err/cppn/+0199.png')
            img(src=imgroot+'scalar_err/cppn/+0019.png')
    //- p.centered #[b Left]: CPPN-Evolution. #[b Right]: Latent-CMAES
    img(src=imgroot+'compare.svg')
    //- i ()
    
    p  CMA-ES latent evolution did best but the difference was close enough that it could be made up with meta-parameter tuning. Machine learning methods may be very powerful for organizing search spaces for exploration. However, this 'smoothness' corresponds to a decrease in resolution. This is evident in the  above images where the direct evolution had a hard time cleaning up certain details but was able to produce more diverse forms. Remarkably, they still managed to produce a near-equal average fitness. 

    p Evolution in latent space has other nice properties not fully evident here. It is capable of producing a crossover operator and arbitrarily large mutations where none might exist (such as #[a(href='/evo_floorplans.html') floor-plans] or #[a(href='https://www.antimander.org') congressional districts]), the ability to define the design space via examples and the performance benefits of a smaller search space.

    p CPPN's are attractive for their capacity to create novelty unburdened by datasets. However, the shapes bias towards simpler geometric shapes defined by the node operators and most runs stayed stuck in the local optimum of a circle. 
    
    h2 Implementation 
    p.centered: a(href='https://github.com/joel-simon/FormsOfLife') Source
    p The code is written in Python and uses Pytorch (for ML models), #[a(href='https://cython.org/') Cython] (for image operators) and #[a(href='https://github.com/taichi-dev/taichi') Taichi] (for running GOL in Cuda). These enable extremely efficient but also highly compact and readable code. Two-hundred GOl boards can be run in parallel for 1000 steps in a fraction of a second and a whole optimization run takes just a few minutes. The GA uses #[a(href='https://pymoo.org/') pymoo] and the evolutionary strategy uses #[a(href='https://github.com/CMA-ES/pycma') pycma]. The WebGL viewers use #[a(href='http://regl.party/') regl].
    
    //- p How would other artificial life to live? and who will design it for them?
    h2 Future Work
    p Broadening the imagination for artificial life is a goal, and there are several other AL domains where it is fun to imagine how they might want to live and what their architecture and communities could look like. For improved spatial optimization, hybrid latent-direct methods that can leverage the advantage of both is exciting. Additionally, incorporating fitness into the ML models and applying it to other generative design problems is a current area of my research. 

    h2 Related
    p Here are other examples of my speculative-design and computational-art projects in the medium of spatial optimization:
    -var others = ["Evolving Floorplans", "Dimensions of Dialogue", "Corals"]
    each project, i in publicData['projects']
        if others.includes(project.name)
            +project_mixin(project)
    
block post_content
    script(src="https://npmcdn.com/regl/dist/regl.js")
    script(src='/src/utils.js')
    script(src='/src/forms_of_life/shader.js')
    script(src='/src/forms_of_life/gol-viewer.js')
    script(src='/src/forms_of_life/index.js')

